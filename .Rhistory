document()
check(vignettes = F)
document()
check(vignettes = F)
?hist
?abline
??mix.2norm.onlysd
document()
check(vignettes = F)
document()
check(vignettes = F)
install()
document()
install()
install()
check(vignettes = F)
?document
?check
?document
document
?betabin
??betabin
document()
?check
check(document = F, vignettes = F)
check(document = F, vignettes = F)
check(document = F, vignettes = F)
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("BiocCheck")
library(BiocCheck)
BiocCheck('no-check-vignettes' = F)
?vapply
seq_len(2)
seq_len(6)
?seq_len
seq_len(2,6)
seq(2,6)
if (!requireNamespace("styler", quietly = TRUE)) {
install.packages("styler")
}
?document
styler::style_pkg(transformers = styler::tidyverse_style(indent_by = 4))
document()
BiocCheck('no-check-vignettes' = F)
BiocCheck('no-check-vignettes' = F)
BiocCheck('no-check-vignettes' = F)
install()
library(PAM)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
warnings()
install()
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
?aod::betabin
document()
setwd("C:/Users/dd284/OneDrive/harry/PAM")
document()
install()
library(PAM)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
warnings()
install()
library(PAM)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
setwd("C:/Users/dd284/OneDrive/harry/PAM")
remove.packages("PAM")
install()
library(PAM)
devtools::install()
library(PAM)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
??bplapply
fun <- function(v) {
message("working") ## 10 tasks
sqrt(v)
}
BiocParallel::bplapply(1:10, fun)
setwd("C:/Users/dd284/OneDrive/harry/PAM")
devtools::install()
library(PAM)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
remove.packages("TRESS")
BiocManager::install("TRESS")
library(devtools)
library(devtools)
install.packages("htmltools")
library(devtools)
library(datasetTRES)
#####Required
library(GenomicRanges)
library(TRESS)
library(AnnotationDbi)
library(Rsamtools)
library(purrr)
library(Matrix)
library(matrixStats)
library(RColorBrewer)
library(reshape2)
library(BiocParallel)
library(openxlsx)
library(dplyr)
library(DESeq2)
library(aod)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
#setwd("/Users/daoyuduan/Library/CloudStorage/OneDrive-Personal/harry/m6a_power")
library(miceadds)
source.all(path = "./")
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
#setwd("/Users/daoyuduan/Library/CloudStorage/OneDrive-Personal/harry/m6a_power")
library(miceadds)
source.all(path = "./")
source.all(path = "./")
source.all(path = "./")
##Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)### option to use exomePeak2/TRESS
library(GenomicFeatures)
install.packages("GenomicFeatures")
install.packages("GenomicFeatures")
library(GenomicFeatures)
library(devtools)
library(datasetTRES)
#####Required
library(GenomicRanges)
library(TRESS)
library(AnnotationDbi)
library(Rsamtools)
library(purrr)
library(Matrix)
library(matrixStats)
library(RColorBrewer)
library(reshape2)
library(BiocParallel)
library(openxlsx)
library(dplyr)
library(DESeq2)
library(aod)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
#setwd("/Users/daoyuduan/Library/CloudStorage/OneDrive-Personal/harry/m6a_power")
library(miceadds)
source.all(path = "./")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "TRESS"
)
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "exomePeak2"
)### option to use exomePeak2/TRESS
View(res_all2)
save(res_all2, "res_all2.rdata")
save(res_all2, file = "res_all2.rdata")
library(devtools)
library(datasetTRES)
#####Required
library(GenomicRanges)
library(TRESS)
library(AnnotationDbi)
library(Rsamtools)
library(purrr)
library(Matrix)
library(matrixStats)
library(RColorBrewer)
library(reshape2)
library(BiocParallel)
library(openxlsx)
library(dplyr)
library(DESeq2)
library(aod)
####
setwd("C:/Users/dd284/OneDrive/harry/m6a_power")
#setwd("/Users/daoyuduan/Library/CloudStorage/OneDrive-Personal/harry/m6a_power")
library(miceadds)
source.all(path = "./")
###Main function
power.test = PowerEval(
Input.file = c("Ctrl1.chr1.input.bam", "Ctrl2.chr1.input.bam","Case1.chr1.input.bam", "Case2.chr1.input.bam"),
IP.file = c("Ctrl1.chr1.ip.bam", "Ctrl2.chr1.ip.bam","Case1.chr1.ip.bam", "Case2.chr1.ip.bam"),
BamDir = "./data/GSE46705_split_chr",
annoDir = "./data/annotation/hg18_chr1.sqlite",
variable = rep(c("Ctrl", "Trt"), each = 2),
bam_factor = 0.08,
nsim = 10,
N.reps = c(2,3),
depth_factor = c(1,2),
thres = c(0.01, 0.05, 0.1)
,Test_method = "exomePeak2"
)### option to use exomePeak2/TRESS
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("AnnotationHubData")
AnnotationHubData::makeAnnotationHubMetadata
ï¼ŸAnnotationHubData::makeAnnotationHubMetadata
?AnnotationHubData::makeAnnotationHubMetadata
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("RNAseqData.HNRNPC.bam.chr14")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SCLCBam")
library(SCLCBam)
getPathBamFolder()
cat(SCLCBam:::.wrap(getPathBamFolder()))
paths <- readRDS("C:/Users/dd284/AppData/Local/R/win-library/4.2/SCLCBam/help/paths.rds")
features <- readRDS("C:/Users/dd284/AppData/Local/R/win-library/4.2/SCLCBam/Meta/features.rds")
vignette <- readRDS("C:/Users/dd284/AppData/Local/R/win-library/4.2/SCLCBam/Meta/vignette.rds")
View(vignette)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TBX20BamSubset")
getwd()
TBX20BamSubset::getBamFileList()
getwd()
load("C:/Users/dd284/OneDrive/harry/m6a_power/example/GSE46705_res.rdata")
PlotRes(power.test, depth_factor = 1, value_option = "FDR")
library(PAM)
PlotRes(power.test, depth_factor = 1, value_option = "FDR")
PlotAll(power.test, depth_factor = 1)
###plot an individual strata result
PlotStrata(power.test, value_option = "FDR")##add na
PlotALL_Strata(power.test)
load("C:/Users/dd284/OneDrive/harry/m6a_power/example/GSE55575_res.rdata")
PlotRes(power.test, depth_factor = 1, value_option = "FDR")
PlotAll(power.test, depth_factor = 1)
PlotALL_Strata(power.test)
###plot an individual strata result
PlotStrata(power.test, value_option = "FDR")##add na
Power.list = power.test
View(power.test)
Power.list <- Power.list[["1x"]][5:8]
par(mfrow = c(2, 2))
for (value_option in c("FDR", "FDC", "Power", "Precision")) {
power_sub <- Power.list[[value_option]]
# names(power_sub) = names(Power.list)
power_sub <- melt(power_sub,
id.vars = c("N.rep"),
variable.name = "Strata",
value.name = paste0(value_option)
)
# FDR.toP = Power.list[["FDR"]]
# par(mfrow = c(2,2))
# df_plot <- power_sub[[paste0(SD_multiplier, "x")]]
df_plot <- power_sub
names(df_plot)[1] <- "Number of Replicates"
xvals <- split(df_plot[, 2], df_plot[, 1])
yvals <- split(df_plot[, 3], df_plot[, 1])
plot(seq_along(unique(as.factor(unlist(xvals)))),
ylim = c(0, max(unlist(yvals), na.rm = TRUE)), type = "n", xaxt = "n",
xlab = "Average Input Strata by Percentile", ylab = value_option
)
mapply(lines, xvals, yvals,
col = brewer.pal(n = nrow(unique(df_plot[1])), name = "Set1")[seq_len(nrow(unique(df_plot[1])))],
pch = seq_len(nrow(unique(df_plot[1]))), type = "o"
)
axis(1,
at = seq_along(unique(as.factor(unlist(xvals)))),
labels = unique(as.factor(unlist(xvals)))
)
title(main = paste0(value_option, " by Strata \n", "Sequencing Depth: 1x"))
# mtext(side = 3, line = 0.25, at = 1, adj = -2, "Sequencing Depth: 1x")
legend("bottomleft",
legend = paste0("n = ", unique(df_plot[, 1])),
title = "",
col = brewer.pal(n = nrow(unique(df_plot[1])), name = "Set1")[seq_len(nrow(unique(df_plot[1])))], pch = seq_len(nrow(unique(df_plot[1]))), cex = 0.8, bty = "n", bg = "transparent"
)
}
library(reshape2)
for (value_option in c("FDR", "FDC", "Power", "Precision")) {
power_sub <- Power.list[[value_option]]
# names(power_sub) = names(Power.list)
power_sub <- melt(power_sub,
id.vars = c("N.rep"),
variable.name = "Strata",
value.name = paste0(value_option)
)
# FDR.toP = Power.list[["FDR"]]
# par(mfrow = c(2,2))
# df_plot <- power_sub[[paste0(SD_multiplier, "x")]]
df_plot <- power_sub
names(df_plot)[1] <- "Number of Replicates"
xvals <- split(df_plot[, 2], df_plot[, 1])
yvals <- split(df_plot[, 3], df_plot[, 1])
plot(seq_along(unique(as.factor(unlist(xvals)))),
ylim = c(0, max(unlist(yvals), na.rm = TRUE)), type = "n", xaxt = "n",
xlab = "Average Input Strata by Percentile", ylab = value_option
)
mapply(lines, xvals, yvals,
col = brewer.pal(n = nrow(unique(df_plot[1])), name = "Set1")[seq_len(nrow(unique(df_plot[1])))],
pch = seq_len(nrow(unique(df_plot[1]))), type = "o"
)
axis(1,
at = seq_along(unique(as.factor(unlist(xvals)))),
labels = unique(as.factor(unlist(xvals)))
)
title(main = paste0(value_option, " by Strata \n", "Sequencing Depth: 1x"))
# mtext(side = 3, line = 0.25, at = 1, adj = -2, "Sequencing Depth: 1x")
legend("bottomleft",
legend = paste0("n = ", unique(df_plot[, 1])),
title = "",
col = brewer.pal(n = nrow(unique(df_plot[1])), name = "Set1")[seq_len(nrow(unique(df_plot[1])))], pch = seq_len(nrow(unique(df_plot[1]))), cex = 0.8, bty = "n", bg = "transparent"
)
}
library(RColorBrewer)
for (value_option in c("FDR", "FDC", "Power", "Precision")) {
power_sub <- Power.list[[value_option]]
# names(power_sub) = names(Power.list)
power_sub <- melt(power_sub,
id.vars = c("N.rep"),
variable.name = "Strata",
value.name = paste0(value_option)
)
# FDR.toP = Power.list[["FDR"]]
# par(mfrow = c(2,2))
# df_plot <- power_sub[[paste0(SD_multiplier, "x")]]
df_plot <- power_sub
names(df_plot)[1] <- "Number of Replicates"
xvals <- split(df_plot[, 2], df_plot[, 1])
yvals <- split(df_plot[, 3], df_plot[, 1])
plot(seq_along(unique(as.factor(unlist(xvals)))),
ylim = c(0, max(unlist(yvals), na.rm = TRUE)), type = "n", xaxt = "n",
xlab = "Average Input Strata by Percentile", ylab = value_option
)
mapply(lines, xvals, yvals,
col = brewer.pal(n = nrow(unique(df_plot[1])), name = "Set1")[seq_len(nrow(unique(df_plot[1])))],
pch = seq_len(nrow(unique(df_plot[1]))), type = "o"
)
axis(1,
at = seq_along(unique(as.factor(unlist(xvals)))),
labels = unique(as.factor(unlist(xvals)))
)
title(main = paste0(value_option, " by Strata \n", "Sequencing Depth: 1x"))
# mtext(side = 3, line = 0.25, at = 1, adj = -2, "Sequencing Depth: 1x")
legend("bottomleft",
legend = paste0("n = ", unique(df_plot[, 1])),
title = "",
col = brewer.pal(n = nrow(unique(df_plot[1])), name = "Set1")[seq_len(nrow(unique(df_plot[1])))], pch = seq_len(nrow(unique(df_plot[1]))), cex = 0.8, bty = "n", bg = "transparent"
)
}
value_option = "FDR"
power_sub <- Power.list[[value_option]]
# names(power_sub) = names(Power.list)
power_sub <- melt(power_sub,
id.vars = c("N.rep"),
variable.name = "Strata",
value.name = paste0(value_option)
)
View(power_sub)
power_sub <- Power.list[[value_option]]
View(power_sub)
View(power.test)
power.test[[1]]
View(power.test)
?dcast
factor(c("(0, 9.34]", "(17.24, 28.74]", "(28.74, Inf]", "(9.34, 17.24]"))
factor(c("(0, 9.34]", "(9.34, 17.24]"), "(17.24, 28.74]", "(28.74, Inf]")
factor(c("(0, 9.34]", "(9.34, 17.24]"), "(17.24, 28.74]", "(28.74, Inf]"))
factor(c("(0, 9.34]", "(9.34, 17.24]", "(17.24, 28.74]", "(28.74, Inf]"))
View(power.test)
load("C:/Users/dd284/OneDrive/harry/m6a_power/example/115105_res.rdata")
PlotRes(power.test, depth_factor = 1, value_option = "FDR")
dev.off()
PlotRes(power.test, depth_factor = 1, value_option = "FDR")
PlotAll(power.test, depth_factor = 1)
PlotALL_Strata(power.test)
###plot an individual strata result
PlotStrata(power.test, value_option = "FDR")##add na
View(power.test)
View(power.test[[1]])
View(power.test[[1]][[5]])
View(power.test[[1]][[6]])
View(power.test[[1]][[7]])
View(power.test[[1]][[8]])
devtools::document()
?QuickPower
devtools::document()
?QuickPower
devtools::document()
?QuickPower
devtools::document()
?QuickPower
devtools::document()
?QuickPower
devtools::document()
?QuickPower
devtools::document()
devtools::document()
?QuickPower
styler::style_pkg(transformers = styler::tidyverse_style(indent_by = 4))
